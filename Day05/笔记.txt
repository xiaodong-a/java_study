1.IDEA
	1.创建空的项目
	2.在项目中创建模块
	3.在模块中的src下创建包
	4.在包中创建java文件
	5.能够运行代码
	
	出现的问题:
		idea点图标打不开, 手动去idea的bin目录下找到idea64.exe发送桌面快捷方式
2.IDEA的一些常用的快捷键
	1.psvm ---> 快捷生成主方法
	2.sout ---> 快捷生成打印语句
	3.file ---> setting ---> key map ---> main menu ---> code ---> complection ---> basic ---> 添加快捷键 alt + /
	4.格式化代码 ---> alt + ctrl + L
	5. ctrl + / ---> 可以快速单行注释, 再来一次取消
	6. alt + shit + / ---> 可以快速多行注释, 再来一次取消
3.死循环
	1.for死循环的写法
		for(;true;){
		}
		for(;;){
		}
		特点: 我们一般不会用for来编写死循环, 因为太丑了!!!!!
	2.while	死循环的写法
		while(true){
		
		}
	注意: 我们开发过程中, 一般不会真的写死循环, 死循环可以理解不明确循环次数的循环, 但是当满足
		  条件的时候我们还是经常会使用循环控制的关键 break来结束循环
4.如何去交换两个变量中的值
	int a = 10;
	int b = 20;
	采用第三方临时变量来解决我们的问题
	例如:
		int temp = a;
		a = b;
		b = temp;
		
5. Random(他是jdk编写的一个类)
	作用: 可以帮助我们生成一个随机数
	使用步骤:
		1.导包 ---> 为了找到Random这个类
			import java.util.Random;
		2.创建对象 ---> 因为只有对象才可以使用Random中定义的方法
			Random r = new Random();
		3.使用功能 nextInt(整数值); ---->可以生成[0,整数值-1 ]的范围的数字
			int number = r.nextInt(整数值);
	如何生成[m,n]之间的随机数
		公式: nextInt(n - m + 1) + m
6. 数组	
	它是一个引用数据类型
	作用: 用来存储多个相同数据类型的元素们, 直白一点, 就是一个大号的容器
	注意:
		1.数组存储的元素数据类型统一
		2.数组长度一旦创建不能再发生改变,除非在创建一个新的数组
			
	
	创建容器:
		动态初始化:
			数据类型[] 数组名 = new 数据类型[长度];(推荐)
			数据类型 数组名[] = new 数据类型[长度];(不推荐)
			格式详解:
				数据类型:规定数组中存放什么样的元素
				[] : 代表是一个数组
				数组名: 为了后期操作数组用的
				new : 向内存申请空间
				[长度]: 代表数据存储元素的个数
			使用场景:
				已知长度, 不知道元素, 可以采用这种方式
			
		静态初始化:
			数据类型[] 数组名 = new 数据类型[]{元素1,元素2,...............};(不推荐)
			数组类型[] 数组名 = {元素1,元素2,...............};(推荐)
			注意:
				省略格式, 不能拆开写!!!!,否则语法错误.
			使用场景:
				已知元素, 采用静态初始化
			
	
	如何往容器中存放数据:
		格式:
			数组名[索引] = 值;
	如何获取容器中的数据:
		格式:
			数据类型 变量名 = 数组名[索引];
	数组的属性:
		length: 可以动态获取数组元素的个数
		
	数组的特点:
		1.数组有索引,编号从0开始, 又叫做角标, 下标
		2.数组的元素都有默认值 ----> 为啥??? 因为他存储在堆内存中
			整数: 默认值0
			小数: 默认值0.0
			boolean: 默认值false
			char: '\u0000'
			引用数据类型: 默认值为null
			
			[I@4554617c :
				[: 数组的意思
				I: int类型的意思
				@: 找的意思
				4554617c: 地址生成的hash值, 简单理解为地址
	
		
7. jvm内存的划分
	栈:
		作用: 用来给方法开辟空间, 存储方法中的局部变量
		局部变量: 定义在方法中的变量都是局部变量
	堆:
		作用: 用来存储new出来的东西
		特点:
			1.堆中的数据都有默认值
				整数: 默认值0
				小数: 默认值0.0
				boolean: 默认值false
				char: '\u0000'
				引用数据类型: 默认值为null
			2.堆内存如果地址没有被引用的话, 会在不确定的时间, 被gc,垃圾回收机制
				
	方法区:
		作用: 1.存放字节码加载到内存的对象 2. 存放静态相关的东西
	本地方法区:(跟系统有关的)
	寄存器:(跟cpu有关系)
8. 数组常见的问题
	1.索引越界:
		原因: 访问了不存在的索引
		解决: 不要访问不存在索引就可以了
	2.空指针异常
		原因: 拿null调用了方法, 或者使用了属性, 操作了null这个常量
		解决: 给对象不要赋值为null就可以
		
		
		
		
		
		
		
		
		
		