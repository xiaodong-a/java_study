1.final关键字(最终的)
	作用: 修饰类, 成员方法, 成员变量
	修饰类: 最终类, 不能再被其他类继承(了解!!!!!!!!!!!)
		使用场景: 当我们类中所有内容都不希望被修改的时候才会使用
	修饰方法: 该方法是最终方法, 不能被子类重写(了解!!!!!!!!!!!)
		使用场景: 当我们的方法不希望被(迭代)修改的时候才会使用
	修饰变量:这个变量叫做最终变量, 要求有且只能被赋值一次(掌握!!!!!!!!!!!)
		基本数据类型,是值不能发生改变,而引用数据类型是地址值不能发生改变
		1.修饰局部变量
			注意: 命名规范和普通的变量没有什么区别
		2.修饰成员变量
			注意: 命令规范建议大家全部单词都大写, 多个单词之间用_隔开
			赋值方式:
				1.定义的时候赋值(推荐)
				2.通过构造函数赋值(不推荐)
					原因: 因为必须保证每个构造中都有对这个final修饰的成员变量赋值才可以
		使用场景:
			可以让普通的常量更具备可读性
2.static
	作用: 修饰成员变量, 修饰成员方法, 修饰成员内部类			
	特点: 被static修饰的东西, 不在属于对象,而是属于整个类共享的数据,随着类的字节码的
		  加载而加载,先于对象存在
	调用格式:
		建议使用类名.调用
	静态注意:
		静态只能访问静态!!!!!
		因为静态的东西先初始化, 非静态的东西是后初始化, 先存在的东西不能使用后存在的东西
	结论:
		静态的东西我们直接拿类名调用!!!!
		非静态的东西必须创建对象才可以使用!!!!
3.接口
	作用: 定义规则和规范用的
	如何定义:
		格式:
			public interface 接口名{
				
			}
			public class 类型{
			
			}
	内容:
		1.定义抽象方法(掌握!!!!!!!!!!!!!!)
			格式:
				[public] [abstract] 返回值类型 方法名(参数列表);
			特点: 没有方法体
		2.jdk1.8可以定义默认方法(理解)
			格式:
				[public] default 返回值类型 方法名(参数列表){
					方法体;
					return 返回值;
				}
			作用: 一般情况是用来解决接口升级的问题	
			注意事项:
				1.亲爹和干爹方法冲突了, 优先使用亲爹的方法
				2.干爹和干爹方法冲突了, 子类一定要重写这个冲突的方法
		3.jdk1.8可以定义静态方法(理解)
			格式:
				[public] static 返回值类型 方法名(参数列表){
					方法体;
					return 返回值;
				}
			调用:
				接口中的静态方法, 只能使用接口名调用, 不能使用实现类调用!!!!!!
		4.常量(理解)	
			接口中的成员变量默认被public static final 修饰
			
		总结:
			接口中最最重要的还是传说中抽象方法!!!!!!!!!!!!!!!!!!!!!!!!
			
	使用接口
		注意: 接口不能直接创建对象, 因为接口中可能有抽象方法, 不能直接使用
		1.定义接口的实现类
			格式:
				public class 类名 implements 接口名{
					重写接口中所有的抽象方法

				}
		2.使用实现类
	注意事项:
		1.接口中是没有构造函数的
			原因接口刚出来的时候只有静态的常量和抽象方法, 这些内容都不需要初始化
		2.接口中不能定义成员变量, 因为默认被public static final	修饰
4.抽象类和接口的区别
	抽象类: 要求所有的子类都要去实现规则和规范,所有子类的共性
	接口: 要求实现类必须实现规则规范, 更灵活一点,因为可以让满足条件的去实现!!!!!!!!!,后期扩展
5.类和接口的关系
		类和接口 ---> implements关系, 而且支持多实现
		接口和接口 ----> extends关系, 而且支持多继承
		注意:
			多个父接口中出现相同默认方法时, 子接口一定对这个冲突的默认方法进行重写
			
	
	
	
	
	
	
	
	
	
	
	
	
	
		