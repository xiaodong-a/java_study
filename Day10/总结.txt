1.如何定义一个标准类
	1.类需要用public修饰
	2.所有的成员变量使用private来修饰
	3.给所有的成员变量提供setter和getter方法
	4.提供无参和满参构造
2.继承
	概念: 让类和类之间发生关系, 产生子类和父类
	特点:
		1.子类有好处, 可以直接使用父类中非私有的东西
		2.java中的继承只支持单继承, 不支持多继承, 说白话, 一个子类只能有一个直接父类
			原因:
				因为一个子类如果有两个直接父类的话, 这两个父类中如果内容有冲突,jvm解决不了
		3.java中支持多层基层, 子类的父类还可以有父类
	格式:
		public class 父类{}
		public class 子类 extends 父类{}
	优点:
		提高了代码的复用性, 在父类中定义的内容, 子类可以不用再次定义
		提高了代码的维护性, 一旦父类做了修改或者添加,或者删除, 子类也随着变化
	缺点:
		让类和类的耦合度变高了, 我们开发遵循的原则高内聚,低耦合, 子类会受到父类的影响
		
	注意:
		继承必须满足is a这种情况. 子类是父类的一种类别的情况才可以
3.继承中各个组成部分的访问问题
	1.当子父类中出现相同的属性 ----> 就近原则
	2.当子父类中出现相同的方法 ----> 就近原则
		我们称为这种想象为重写
		重载: 发生在一个类中, 方法名相同, 参数列表不同的现象
		重写: 发生在子父类中, 方法名相同, 参数列表也相同的现象
			@Override : 可以帮助我们检验是否正确重写
			使用场景:
				只有当我们对父类的方法不满意的时候才会重写
	3.子父类的构造关系
		子类的构造函数第一行,如果没有显示调用其他构造的话, 会默认调用父类的无参构造,系统会默认加super();
		为什么???
			子类随时都可能使用父类的成员, 父类的成员一定要先初始化好, 子类才能初始化
			
		注意: super调用构造的语句必须在子类构造的第一行	
4.this和super的用法
	this: 专门用来调用本类的成员变量,成员方法, 构造函数, this比super范围要大, 如果本类没有,也会找父类
	super: 专门用来调用父类的成员变量,成员方法, 构造函数
5.抽象类
	特点:
		1.和普通类相比, 就是可以定义抽象方法而已
		2.和普通类相比, 不能直接创建对象
	作用:
		定义规则和规范, 强制所有的子类按照规则和规范做事情
	abstract:
		修饰类: 抽象类, 特点不能创建对象
		修饰方法: 抽象方法, 该方法没有方法体
	注意:
		抽象类不能直接使用, 我们需要定义子类来继承抽象类,使用子类才可以
		抽象类子类要么重写抽象类所有的抽象方法, 要么自己也是抽象
				
				
			