1.面向过程和面向对象的区别:
	面向过程: 注重实现功能的步骤
	面向对象: 注重能够解决问题的对象
	面向对象基于面向过程
2.面向对象
	特点:
		封装:
			隐藏实现细节, 对外暴露公共的访问方式
			通常的体现:
				1.私有化成员变量,对外提供setXxx和getXxx的方法
				2.将功能抽取成方法
			好处:
				提供代码的安全性,完整性
		继承:
		多态:
	优点:
		1.更符合我们现实生活中的思考习惯
		2.让复杂的事情变得简单
		3.让我们从一个执行者的角度, 变成指挥者
3.类和对象的关系
	类: 一类事物,通常指的泛指
	对象: 一类事物中的其中一个, 通常指的是特指
4.描述类
	属性:
		java中采用成员变量描述
		局部变量: 定义在方法内部以及方法声明上的变量
		成员变量: 定义在类中方法外的变量, 有默认值
		区别:
			1.位置
				局部变量:方法内或者方法声明上
				成员变量:在类中方法外
			2.内存的位置:
				局部变量:栈
				成员变量:堆
			3.生命周期
				局部变量: 随着方法的执行而诞生, 随着自己的}执行完毕后,消失
				成员变量: 随着对象的创建而诞生, 随着对象的消失而消失
			3.默认值
				局部变量: 没有默认值, 必须赋值才可以使用
				成员变量: 有默认值
	行为:
		java中采用成员方法描述
5.类的使用
	注意: 类"通常"不能直接使用, 需要创建对象才可以使用
	1.创建对象格式:
		类名 对象名 = new 构造函数();
		
	2.使用对象的属性	
		格式:
			对象名.属性名
	3.使用对象的行为
		格式:
			对象名.成员方法(实参);
6.this
	意义: 谁调用我, 我就代表谁
	作用: 区分局部变量和成员变量的重名情况
7.构造函数
	作用: 用来给成员进行初始化的
	格式:
		修饰符 类名(参数列表){
		}
	注意事项:
		1.构造函数的名字必须和类名一模一样,大小写也需要一样
		2.构造函数没有返回值类型, 连void都不能有
		3.构造函数如果我们没有给定, 系统会给我们默认空参构造
		4.如果我们一旦给了任何一个构造, 系统将不再赠送无参构造
		5.构造函数可以重载
8.标准类定义格式
	1.类需要用public修饰
	2.属性要用private修饰
	3.为每一个属性生成对应的setXxx和getXxx的方法
	4.提供无参和满参构造
	常用的快捷键:
		alt + insert --->帮助我们快速生成一些东西
		ctrl + p ---> 显示方法中需要的参数

	file --> setting ---> editor ---> general ---> code complection --->将 show parameter这个勾上去
	file --> setting ---> editor ---> general ---> code complection --->将 match case这个勾下去
	file --> setting ---> editor ---> general ---> change fontsize with ctrl + mouse wheel勾上去








	