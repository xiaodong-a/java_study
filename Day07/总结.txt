1.嵌套循环
	执行流程:
		外循环走一次, 内循环走一轮
	练习:
		1.打印3行5列的
			*****
			*****
			*****
		2.打印三角形
			*
			**
			***
			****
			...
		3.九九乘法表
			基于三角形的升级
2.方法
	概念: 完成特点功能的代码块
	优点:
		1.提高代码的复用性
		2.代码分离, 让主线代码看起来更有条理性, 增加阅读性
	格式:
		修饰符 返回值类型 方法名(参数列表){
			方法体;
			return 返回值;
		}
		修饰符: public static
		返回值类型: 限定返回值用, 限定结果的类型
		方法名: 为该方法起的名字, 方便找到这个方法
		参数列表: 就是方法需要的原料, 这些都是用来记录用户调用方法时参数的值用的
		return: 结束方法, 并将返回值返回给调用者, 返回值的数据类型要和返回值类型匹配
	方法中重要的角色:
		1.参数: 原料
		2.返回值类型: 方法的功能结果 
		
		
	方法的定义和调用
		1.无参无返回值
			修饰符 void 方法名(){
				方法体;
			}
			调用该方法:
				方法名();
			
		2.有参无返回值	
			修饰符 void 方法名(参数类型 变量名,.....){
				方法体;
			}
			调用方法:
				方法名(实际参数);
		3.无参有返回值	
			修饰符 数据类型 方法名(){
				方法体;
				return 返回值;
			}
			调用方法:
				1.单独调用
					方法名(); ---->不推荐,一般没有意义
				2.输出调用
					sout(方法名()); --->将方法的返回值直接输出, 不推荐
				3.赋值调用
					返回值类型 变量名 = 方法名();
		4.有参有返回值	
			修饰符 数据类型 方法名(参数列表){
				方法体;
				return 返回值;
			}
			调用方法:
				1.单独调用
					方法名(实参); ---->不推荐,一般没有意义
				2.输出调用
					sout(方法名(实参)); --->将方法的返回值直接输出, 不推荐
				3.赋值调用
					返回值类型 变量名 = 方法名(实参);
					
3.注意事项
	1.方法是平级的,不能嵌套
	2.方法定义完毕后,如果不调用, 是不会执行的
	3.方法的功能尽量单一
	4.方法必须先定义才能使用
	
4.debug的基本使用
	步骤:
		1.打断点, 哪里不会点哪里
        2.必须debug运行
        3.常用的操作
            step over : f8  --->执行一行代码,如果遇到方法则不进入
            step into: f7 --->执行一行代码, 如果遇到方法则进入
            f9:  从一个断点 直接调到下一个断点
        4.查看的区域
            frames: 这里会显示你调用的所有的方法
            variables: 会显示你的方法中所有的变量, 以及其变化过程
            console : 控制台
         作用:让代码运行慢下来, 我们方便观察
	
5.二维数组
	一维:
		//1.动态初始化
		数据类型[] arr = new 数据类型[10];
		//2.静态初始化
		数据类型[] arr = {元素1,元素2};
	
	二维:
		//1.动态初始化
		int[][] arr = new int[3][4];
		
		
		//2.静态初始化	
			
			
			
			
			
			
			
			
			
			
			