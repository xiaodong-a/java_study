1.集合
	作用: 是一个容器, 可以存储数据
	集合和数组的区别:
		数组: 长度不可以改变,而且数据类型确定, 数组只能存储指定类型数据,可以存储任何类型的数据
		集合: 长度可以变,而且我们可以通过泛型来确定集合的元素的数据类型,但是集合只能存储引用数据类型
		
2.集合体系
	Collection(抽取List和Set集合中都有的东西)
		List:(有序, 有索引, 可以重复)
			ArrayList
			LinkedList
		Set:(大部分无序, 无索引, 不可以重复)
			HashSet
			LinkedHashSet
3.Collection常用功能
	boolean add(E e); ---> 向集合中添加一个元素
	boolean remove(Object o) ---> 移除集合中的指定元素
		注意:
			1.他是将要移除的元素和集合中的每一个元素进行equals方法对比, 如果equals返回true
			则删除
			2.他只会删除满足条件的第一个元素
	boolean contains(Object o) ---> 帮助我们判断集合中是否包含某一个元素
		注意:
			1.将o和集合中所有元素的equals方法进行比较, 除非全部不相同才返回false,有一个相同,则返回true
	int size(); ---->获取集合中元素的个数
	void clear(); ---> 清空集合, 慎用
	void isEmpty(); ----> 判断集合的size是否为0, 无聊的方法!!!!!!
4.迭代器遍历集合
	为什么要学习迭代器, 普通for, 因为普通for只能遍历有索引的集合,而迭代器是一种通用的遍历集合的方式
	1.Collection继承了Iterable这样的接口, 这个接口要求必须有 Iterator iterator()方法,但是每种集合的
	由于数据结构不太一样,所有Iterator实现也不太一样,Iterable只能规定大家必须有这个方法,但是究竟返回
	哪一个Iterator,由各个实现类自己决定
	2.获取迭代器对象
	3.使用迭代器的方法来去遍历集合
		boolean hasNext(); --->帮我们判断是否还有元素
		E next() ; ---->取出元素
	注意:
		1.一次hasNext对应一次next(); 否则会出现数据混乱或者错误
		2.在用迭代器遍历集合的时候, 不能再使用集合的方法对集合进行增删操作, 否则会报并发修改异常!!!!!
			ConcurrentModificationException
			翻阅源码发现: 并发修改异常是由于 expectedModCount和 modCount不一样导致了异常
			总结: 原来并发修改异常这些为了防止漏掉的情况jdk采用的机制,如果真的想要在迭代器遍历集合的时候
			做删除操作, 希望我们采用迭代器的方法来进行删除!!!!!因为迭代器的方法将指针回退了一位,不会
			出现漏掉的情况
	
	
	
5.泛型(理解)
	为何产生????
	作用: 他是为解决不确定类型的问题!!!!是jdk1.5出现的新特性
	注意事项:
		1.泛型必须引用数据类型
		2.泛型如果在创建对象时不手动显示确定,jvm会帮我们确定成Object
		
	如何在定义类或者接口时我们去使用泛型
		
	1.定义泛型类
		格式:将泛型声明在类名后面, 多个泛型之间用,号隔开
		例如:
			public class A<E,T>{
			}
		确定泛型的时机:
			在创建该类对象的时候确定, 创建一次对象可以确定一次
			问: 泛型类可以在创建完对象后在确定泛型? 典型错误
			
	2.定义泛型方法	
		格式: 将泛型声明在方法的返回值前面
		例如:
			 public static <T> void method( T t){

			}
		注意实现:
			在调用方法时确定泛型, 调用一次可以确定一次
			
	3.定义泛型接口
		格式: 将泛型声明在接口名后面
		例如:
			public interface A<T>{
			
			}
		确定泛型的时机	
			1.定义接口实现类时确定, 注意, 一个实现类只能确定一次!!!!!!
			2.定义接口实现类时不确定, 继续将其声明出去, 让别人创建实现类对象的时候确定
			
			
	
	注意: 泛型固然可以提高变量的扩展性, 但是不是什么地方都用的, 如果变量数据类型已然确定
		  不建议使用泛型来描述!!!!!!
6.泛型通配符(泛型的限定)(理解!!!!!!!!!!!!!!!!!!!!!)
	格式: ?
	作用: 用来限定泛型的
	三种写法:
		? : 代表对泛型没有限定
		? extend 类型 ---> 限定该类型以及其子类类型, 上限
		? super 类型 ---> 限定该类型以及其父类类型, 下限
	使用场景:
		我们定义方法时,参数本身带有泛型, 但是我们需要对参数的泛型进行限定的时候可以使用,
		其他地方一般用不到
	总结:
		一般除非是一些框架,或者是一些jdk的底层类,为了通用性才会使用泛型限定
7.常见的数据结构的特点:
	栈: 先进后出
	队列: 先进先出
	数组: 查询快,增删慢
		因为数组是长度不可变的, 一旦发生了增删, 需要创建新的数组,来去操作,牵一发动全身
		查询块是因为有索引
	链表: 查询慢, 增删快
		只能从头或者从尾开始查询, 当数据量比较大的时候, 比较难找
		增删快的原因是只需要断开一个节点, 然后可以进行增删操作, 无需牵一发动全身
8.List
	特点: 
		有序: 存的顺序和取出的顺序一致
		有索引: 有增删改查所有的方法
		可以存储重复元素
	特点方法:
		- `public void add(int index, E element)`: 将指定的元素，添加到该集合中的指定位置上。
		- `public E get(int index)`:返回集合中指定位置的元素。
		- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。
		- `public E set(int index, E element)`:用指定元素替换集合中指定位置的元素,返回值的更新前的元
	注意: 操作跟索引有关的方法, 小心索引越界异常
	LinkedList的特有方法: 建议了解一下即可, 因为都是操作收尾的方法, 我们可以使用其他方式来实现
	
	
	
	
	
	
	