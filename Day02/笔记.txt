1.java中进制 1024
	1byte = 8bit
	1kb = 1024byte
	1mb = 1024 kb
2.数据类型的转化
	自动类型转换:
		大数据类型和小数据类型做运算,结果是大数据类型,程序自发的会将小数类型变成大数据类型
	强制类型转换:
		大数据类型和小数据类型做运算,结果是小数据类型, 需要自己手动转换
		格式:
			小数据类型 变量名 = (小数据类型)(要别转换的结果);
	注意事项:
		1.byte,short,char ----> int ----> long ----> float -----> double,
		  变量byte,short,char在参与数学运算时, 会首先提升成int类型
		2.强制类型转换要少用或者不用, 原因有可能损失精度  
3.运算符(重点!!!!!!!!!!!!!)
	算数运算:
		+,-,*,/,%,++,--
		注意:
			/: java中整数相除, 得到的是整数, 想要得到小数, 必须有小数参与运算
			%: 取余, 求余数
			+: 可以做字符串的拼接, 任何数据和字符串用+连接,会得到一个新的字符串
		++,--
			作用: 对变量进行+1或者-1的操作
			在前: 变量先自增, 然后在去参与运算
			在后: 变量先参与运算,然后在去自增
			总结: 我们只有从左往后读++,--的表达式, 就可以迎刃而解
		注意事项:
			++,--运算隐含了强制类型转换	(大家自己要去验证一下)
			例如:
				byte b = 10;
				b++; // 这个是正确的写法
	赋值运算:
		=,+=,-=,*=,/=,%=
		+=: 相当于 左边 = 左边 + 右边;
		例如:
			byte b = 10;
			b+=5; ----> b = b + 5;
		注意事项:
			复杂的赋值运算隐含了强制类型转换
	比较运算:
		>,<,>=,<=,==,!=
		特点: 
			1.结果是一个boolean类型的值
			2.千万不要将==写成=
	逻辑运算:
		&&,||,!
		作用: 为了连接多个boolean值
		注意:
			1.java中不允许出现  3 < x < 5, 我们需要拆分  x > 3 && x < 5

	三元运算:
		格式:
			数据类型 变量名 = boolean表达式 ? 表达式1 : 表达式2;
		流程:
			首先会判断boolean表达式的结果, 如果是true, 则执行表达式1, 如果是false, 则执行表达式2
		注意:
			三元运算符, 要么将结果输出, 要么用变量接受结果, 不能单独使用!!!!
	位运算:
4.Scanner的使用
		1.打包
			格式:import java.util.Scanner;
			注意: 位置在类的定义上面
		2.创建Scanner对象
			格式: Scanner sc = new Scanner(System.in);
			
		3.使用Scanner的nextInt方法
			格式: int result = sc.nextInt();
		
		
			